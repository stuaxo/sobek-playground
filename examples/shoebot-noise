#!/usr/bin/env python3

import sobek
import sobek.buffer
import sobek.drawable
import noise
import math

from sobek.glm import vec2, vec2array, vec4, mat4


WIDTH = 500
HEIGHT = 500

VERT_SHADER = """
attribute vec2 vertex;

uniform mat4 sobek_ModelMatrix;
uniform mat4 sobek_ProjectionMatrix;

void main() {
    gl_Position = sobek_ProjectionMatrix * sobek_ModelMatrix * vec4(
        vertex.x,
        vertex.y,
        1.0,
        1.0
    );
}
"""

FRAG_SHADER = """
uniform vec4 color;

void main() {
    gl_FragColor = color;
}
"""


def make_quad(x, y, width, height, scale=1.0):
    origin = vec2(x + (width // 2), y + (height // 2))
    w2 = (width / 2) * scale
    h2 = (height / 2) * scale

    verts = (
        origin + vec2(-w2, -h2),
        origin + vec2(w2, -h2),
        origin + vec2(w2, h2),
        origin + vec2(w2, h2),
        origin + vec2(-w2, -h2),
        origin + vec2(-w2, h2)
    )

    return verts


class QuadGrid(sobek.Drawable):
    class Update(sobek.Callback):
        # TIMEOUT = 1.0 / 60.0

        def call(self, node, state):
            start_x = math.sin(state.time * 1.5)
            start_y = math.cos(state.time * 1.5)
            for row in range(node.rows):
                for col in range(node.cols):
                    n = noise.pnoise2(
                        start_y + ((float(row) / float(node.rows)) * 2.0),
                        start_x + ((float(col) / float(node.cols)) * 2.0),
                        1
                    )

                    node.scale(col, row, n + 0.25)

            node.attributes[-1].subload = True

    def __init__(self, rows, cols, width, height, spacing, name=None):
        sobek.Drawable.__init__(self, name)

        # Setup our Buffer attribute and use a vec2array (a super-fast,
        # extremely easy-to-use specialized array) for the VBO data.
        v2a = vec2array()

        self.width = width
        self.height = height
        self.rows = rows
        self.cols = cols
        self.spacing = spacing

        for row in range(rows):
            y = row * (height + spacing)

            for col in range(cols):
                x = col * (width + spacing)

                # Add the two triangles that make up the quad.
                v2a.extend(make_quad(
                    x,
                    y,
                    width,
                    height
                ))

        self._buffer = sobek.Buffer(v2a, vertex_attributes={
            "vertex": sobek.buffer.VertexAttribute(2, 0, 0)
        })

        self.arrays["quads"] = sobek.drawable.DrawArrays(
            sobek.gles2.GL_TRIANGLES,
            0,
            6 * rows * cols
        )

        self.attributes.append(self._buffer)

        self.callbacks.append(self.Update())

    def scale(self, x, y, scale):
        quad = make_quad(
            x * (self.width + self.spacing),
            y * (self.height + self.spacing),
            self.width,
            self.height,
            scale
        )

        # TODO: The vec2array object needs to support SLICE ASSIGNMENT!
        # TODO: JEREMY FIX THIS!
        offset = (y * float(self.cols) * 6.0) + (x * 6.0)

        for i in range(6):
            self._buffer.data[offset + i] = quad[i]


if __name__ == "__main__":
    window = sobek.window.create_window(
        WIDTH,
        HEIGHT,
        fullscreen=False,
        title="sobek-playground"
    )

    scene = sobek.Scene()
    transform = sobek.Transform()

    transform.append(QuadGrid(8, 8, 50, 50, 10))

    transform.matrix = mat4.translate(15.0, 15.0, -1.0)

    scene.append(transform)

    # Manually setup of a Program Attribute.
    program = sobek.Program()

    program.shaders["foo"] = sobek.Shader(sobek.Shader.VERTEX, VERT_SHADER)
    program.shaders["bar"] = sobek.Shader(sobek.Shader.FRAGMENT, FRAG_SHADER)

    scene.attributes.append(sobek.Blend())
    scene.attributes.append(sobek.Uniform("color", vec4(1.0, 1.0, 0.0, 1.0)))
    scene.attributes.append(program)

    scene.matrix = mat4.ortho(0.0, WIDTH, 0.0, HEIGHT, 0.0, 1.0)
    scene.viewport = vec4(0.0, 0.0, WIDTH, HEIGHT)
    scene.clear_color = vec4(0.4, 0.4, 0.4, 1.0)

    fps = window.main_loop(scene, sobek.RenderTraversal())

    print("FPS:", fps)
