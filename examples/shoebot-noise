#!/usr/bin/env python3

import sys

sys.path.extend((".", ".."))

import sobek
import sobek.buffer
import sobek.drawable
import windowing

from sobek.glm import vec2, vec2array, vec4, mat4

WIDTH = 500
HEIGHT = 500


VERT_SHADER = """
attribute vec2 vertex;

uniform mat4 sobek_ModelMatrix;
uniform mat4 sobek_ProjectionMatrix;

void main() {
    gl_Position = sobek_ProjectionMatrix * sobek_ModelMatrix * vec4(
        vertex.x,
        vertex.y,
        1.0,
        1.0
    );
}
"""

FRAG_SHADER = """
uniform vec4 color;

void main() {
    gl_FragColor = color;
}
"""

from random import random


def make_rect(x, y, width, height, scale=1.0):
    width = width * scale
    height = height * scale

    return (
        vec2(x, y),
        vec2(x + width, y),
        vec2(x + width, y + height),
        vec2(x + width, y + height),
        vec2(x, y),
        vec2(x, y + height)
    )


class QuadGrid(sobek.Drawable):
    def __init__(self, rows, cols, width, height, spacing, name=None):
        sobek.Drawable.__init__(self, name)

        # Setup our Buffer attribute and use a vec2array (a super-fast,
        # extremely easy-to-use specialized array) for the VBO data.
        v2a = vec2array()

        self._width = width
        self._height = height
        self._rows = rows
        self._cols = cols

        for row in range(rows):
            y = row * (height + spacing)

            for col in range(cols):
                x = col * (width + spacing)
                r = 0.0  # random() * 0.2

                # Add the two triangles that make up the quad.
                v2a.extend(make_rect(
                    x,
                    y,
                    width,
                    height,
                    1.0 + r
                ))

        self._buffer = sobek.Buffer(v2a, vertex_attributes={
            "vertex": sobek.buffer.VertexAttribute(2, 0, 0)
        })

        self.arrays["quads"] = sobek.drawable.DrawArrays(
            sobek.gles2.GL_TRIANGLES,
            0,
            6 * rows * cols
        )

        self.attributes.append(self._buffer)

    # Scales the quad at location X, Y by the value specified by scale.
    def scale(self, x, y, scale):
        offset = (y * self._cols * 6) + (x * 6)
        scale_mat = mat4.scale(scale, scale, scale)
        trans_mat = mat4.translate(-self._width // 2, -self._height // 2, 0.0)

        v0 = vec4(self._buffer.data[offset])

        for i in range(6):
            v = vec4(self._buffer.data[offset + i])

            v = trans_mat * v
            v = scale_mat * v
            v = mat4.translate(v0.x, v0.y, 0.0) * v

            self._buffer.data[offset + i] = vec2(v.x, v.y)

if __name__ == "__main__":
    window = windowing.create_window(
        WIDTH,
        HEIGHT,
        fullscreen=False,
        title="sobek-playground"
    )

    assets = sobek.Assets((
        "assets",
        "assets/shaders",
        "../assets",
        "../assets/shaders"
    ))

    scene = sobek.Scene()
    transform = sobek.Transform()

    transform.append(QuadGrid(8, 8, 50, 50, 10))

    # TODO: Testing
    transform[-1].scale(0, 0, 0.2)
    transform[-1].scale(1, 1, 0.2)
    transform[-1].scale(2, 2, 0.2)
    # TODO: Testing

    transform.matrix = mat4.translate(15.0, 15.0, -1.0)

    scene.append(transform)

    # Manually setup of a Program Attribute.
    program = sobek.Program()

    program.shaders["foo"] = sobek.Shader(sobek.Shader.VERTEX, VERT_SHADER)
    program.shaders["bar"] = sobek.Shader(sobek.Shader.FRAGMENT, FRAG_SHADER)

    scene.attributes.append(sobek.Blend())
    scene.attributes.append(sobek.Uniform("color", vec4(1.0, 1.0, 0.0, 1.0)))
    scene.attributes.append(program)

    scene.matrix = mat4.ortho(0.0, WIDTH, 0.0, HEIGHT, 0.0, 1.0)
    scene.viewport = vec4(0.0, 0.0, WIDTH, HEIGHT)
    scene.clear_color = vec4(0.4, 0.4, 0.4, 1.0)

    fps = window.main_loop(scene, sobek.RenderTraversal())

    print("FPS:", fps)
